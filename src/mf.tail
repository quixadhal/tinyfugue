# $Id: mf.tail,v 32101.0 1993/12/20 07:10:00 hawkeye Stab $
########################################################################
#  TinyFugue - programmable mud client
#  Copyright (C) 1993  Ken Keys
#
#  TinyFugue (aka "tf") is protected under the terms of the GNU
#  General Public License.  See the file "COPYING" for details.
#
#  DO NOT EDIT THIS FILE.
#  Any configuration changes should be made to the Config file.
########################################################################

#
# Makefile tail.
#

CFLAGS     = $(FLAGS)
SHELL      = /bin/sh
BUILDERS   = Makefile
SOURCE     = main.c world.c util.c socket.c keyboard.c macro.c search.c \
             command.c special.c history.c process.c output.c \
             expand.c dstring.c help.c signals.c variable.c tfio.c


install:  _failmsg _files _obsolete $(EXE) LIBRARY $(MANPAGE) SYMLINK
	@echo > exitmsg
	@echo '#### TinyFugue installation successful.' >> exitmsg
	@echo "#### If you wish, you may remove `cd ..; pwd`". >> exitmsg

all files:  _files
	@echo > exitmsg
	@echo '#### TinyFugue build successful.' >> exitmsg
	@echo '#### Use "make install" to install the files.' >> exitmsg

_files:  tf tf.help.index

_obsolete:
	-[ -n "$(OBSOLETE)" ] && rm -rf $(OBSOLETE)

_failmsg:
	@echo > exitmsg
	@echo '#### TinyFugue installation FAILED.' >> exitmsg
	@echo '#### See README for help.' >> exitmsg

tf:     $(OBJS) $(BUILDERS)
	$(CC) $(CFLAGS) -o tf $(OBJS) $(LIBS)
	-[ -n "$(STRIP)" ] && $(STRIP) tf

EXE $(EXE): tf $(BUILDERS)
	rm -f $(EXE)
	cp tf $(EXE)
	chmod $(MODE) $(EXE)

SYMLINK:
	-if [ -n "$(SYMLINK)" ]; then \
	    rm -f $(SYMLINK); \
	    ln -s $(EXE) $(SYMLINK); \
	fi

LIBRARY $(LIBDIR): tf.help tf.help.index
	@[ -n "$(LIBDIR)" ]
	-[ -f "$(LIBDIR)" ]   && rm -f $(LIBDIR)
	-[ ! -d "$(LIBDIR)" ] && mkdir $(LIBDIR)
	[ -d "$(LIBDIR)" ]
	@#rm -f $(LIBDIR)/*; # this would nuke local.tf
	rm -f $(LIBDIR)/tf.help $(LIBDIR)/tf.help.index
	cp tf.help tf.help.index $(LIBDIR)
	chmod $(MODE) $(LIBDIR)/tf.help $(LIBDIR)/tf.help.index; \
	chmod ugo-wx $(LIBDIR)/tf.help $(LIBDIR)/tf.help.index; \
	cd ../tf.lib; \
	for f in *; do \
	    if [ -f $$f ]; then \
	        rm -f $(LIBDIR)/$$f; \
	        cp $$f $(LIBDIR); \
	        chmod $(MODE) $(LIBDIR)/$$f; \
	        chmod ugo-wx $(LIBDIR)/$$f; \
	    fi; \
	done
	chmod $(MODE) $(LIBDIR)

makehelp: makehelp.c
	$(CC) $(CFLAGS) -o makehelp makehelp.c

tf.help.index: tf.help
	$(MAKE) -f mf.tail CC='$(CC)' CFLAGS='$(FLAGS)' makehelp
	./makehelp

MANPAGE $(MANPAGE): $(BUILDERS) tf.1.$(MANTYPE)man
	cp tf.1.$(MANTYPE)man $(MANPAGE)
	chmod $(MODE) $(MANPAGE)
	chmod ugo-x $(MANPAGE)

tf.1.catman:  tf.1.nroffman
	TERM=vt100; nroff -man tf.1.nroffman > tf.1.catman

Makefile: ../Config ../Makefile mf.tail autoconfig
	@echo
	@echo "WARNING: changes in Config, etc. will not be reflected."
	@echo

dist: tf.1.catman tf.help.index
	rm -f makehelp

uninstall:
	rm -f $(EXE) $(MANPAGE)
	rm -rf $(LIBDIR)

clean:
	cd ..; $(MAKE) clean

distclean:
	cd ..; $(MAKE) distclean

cleanest: distclean
	cd ..; $(MAKE) cleanest

regexp/regexp.o: $(BUILDERS)
	cd regexp; $(MAKE) CC='$(CC)' regexp.o 2>$(REGEXP_ERR)

command.o: command.c port.h dstring.h util.h command.h history.h \
  world.h socket.h output.h macro.h keyboard.h expand.h \
  search.h signals.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
dstring.o: dstring.c port.h malloc.h dstring.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
expand.o: expand.c port.h dstring.h util.h macro.h command.h signals.h \
  socket.h search.h output.h keyboard.h expand.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
help.o: help.c port.h dstring.h util.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
history.o: history.c port.h dstring.h util.h history.h world.h socket.h \
  expand.h output.h macro.h keyboard.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
keyboard.o: keyboard.c port.h dstring.h util.h keyboard.h macro.h \
  output.h history.h socket.h expand.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
macro.o: macro.c port.h dstring.h util.h search.h world.h macro.h \
  keyboard.h expand.h socket.h command.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
main.o: main.c port.h dstring.h util.h history.h world.h socket.h macro.h \
  output.h signals.h keyboard.h tty.h command.h expand.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
makehelp.o: makehelp.c port.h $(BUILDERS)
malloc.o: malloc.c port.h signals.h $(BUILDERS)
output.o: output.c port.h dstring.h util.h world.h socket.h output.h \
  macro.h search.h signals.h history.h keyboard.h tty.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
process.o: process.c port.h dstring.h process.h util.h history.h world.h \
  socket.h expand.h macro.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
search.o: search.c port.h util.h search.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
signals.o: signals.c port.h dstring.h util.h process.h tty.h output.h \
  socket.h macro.h signals.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
socket.o: socket.c port.h fd_set.h dstring.h util.h history.h world.h \
  socket.h output.h process.h macro.h keyboard.h command.h special.h \
  signals.h search.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
special.o: special.c port.h util.h world.h socket.h macro.h history.h \
  $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
tfio.o: tfio.c port.h dstring.h fd_set.h util.h output.h macro.h \
  history.h search.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
tty.o: tty.c port.h util.h tty.h keyboard.h output.h macro.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
util.o: util.c port.h dstring.h util.h output.h macro.h tty.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
variable.o: variable.c port.h util.h output.h macro.h socket.h search.h \
  signals.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h
world.o: world.c port.h dstring.h util.h history.h world.h output.h \
  process.h macro.h search.h $(BUILDERS) tf.h config.h malloc.h tfio.h variable.h

# everything below here is platform dependent

dep: *.c
	gcc -MMD -E *.c >/dev/null
	cat *.d > dep
	rm *.d

tf.pixie: tf
	pixie -o tf.pixie tf

lint:
	lint $(CFLAGS) $(SOURCE) $(LIBRARIES)

# The next line is a hack to get around a bug in BSD/386 make.
make:
